type Event {
  # Example field (placeholder)
  exampleField: Int
}

input CreateEventInput {
  # Example field (placeholder)
  exampleField: Int
}

input UpdateEventInput {
  id: Int!
}

type Query {
  event: [Event]!
  event(id: Int!): Event
}

type Mutation {
  createEvent(createEventInput: CreateEventInput!): Event!
  updateEvent(updateEventInput: UpdateEventInput!): Event!
  removeEvent(id: Int!): Event
}
input CreateOneEventInput {
  title: String!
  description: String!
  startDate: DateTime!
  endDate: DateTime!
  color: String!
  categoryId: ID!
}

type Event {
  id: ID!
  title: String!
  description: String!
  startDate: DateTime!
  endDate: DateTime!
  color: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
  updatedBy: User
  category: EventCategory!
  participants: [User!]!
}

type Mutation {
  createOneEvent(input: CreateOneEventInput!): Event!
}
input CreateManyEventsInput {
  events: [CreateOneEventInput!]!
}

type Mutation {
  createManyEvents(input: CreateManyEventsInput!): [Event!]!
}
input UpdateOneEventInput {
  id: ID!
  title: String
  description: String
  startDate: DateTime
  endDate: DateTime
  color: String
  categoryId: ID
}

type Mutation {
  updateOneEvent(input: UpdateOneEventInput!): Event!
}
input UpdateManyEventsInput {
  events: [UpdateOneEventInput!]!
}

type UpdateManyResponse {
  updatedCount: Int!
}

type Mutation {
  updateManyEvents(input: UpdateManyEventsInput!): UpdateManyResponse!
}
